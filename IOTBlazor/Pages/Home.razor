@page "/"
@inject IJSRuntime JS;

<PageTitle>SweetHome</PageTitle>

<style>
    body {
        background-color: black;
        color: white;
    }
</style>

<p style="height: 290px; text-align:center;font-size:172pt; font-weight:600;">@sNow</p>

<table align="center">
    <tr>
        <td>
            <table align="center" style="@styleInt">
                <tr>
                    <td colspan="3">
                        <p style="height: 140px; text-align:center;font-size:96pt; font-weight:500;">@sTempInt</p>
                    </td>
                </tr>

                <tr>
                    <td>
                        <p style="height: 75px; text-align:center;font-size:48pt; font-weight:400;">@sTempIntMin</p>
                    </td>
                    <td>
                        <p style="height: 25px; vertical-align:central; text-align:center;font-size:18pt; font-weight:300;">24h</p>
                    </td>
                    <td>
                        <p style="height: 75px; text-align:center;font-size:48pt; font-weight:400;">@sTempIntMax</p>
                    </td>
                </tr>

                <tr>
                    <td>
                        <p style="height: 75px; text-align:center;font-size:48pt; font-weight:400;">@sTempIntMin48</p>
                    </td>
                    <td>
                        <p style="height: 25px; vertical-align:central; text-align:center;font-size:18pt; font-weight:300;">48h</p>
                    </td>
                    <td>
                        <p style="height: 75px; text-align:center;font-size:48pt; font-weight:400;">@sTempIntMax48</p>
                    </td>
                </tr>
            </table>
        </td>

        <td width="100">
            &nbsp;
@*             @sTempUpdate
 *@        </td>

        <td>
            <table align="center" style="@styleExt">
                <tr>
                    <td colspan="3">
                        <p style="height: 140px; text-align:center;font-size:96pt; font-weight:500;">@sTempExt</p>
                    </td>
                </tr>

                <tr>
                    <td>
                        <p style="height: 75px; text-align:center;font-size:48pt; font-weight:400;">@sTempExtMin</p>
                    </td>
                    <td>
                        <p style="height: 25px; vertical-align:central; text-align:center;font-size:18pt; font-weight:300;">24h</p>
                    </td>
                    <td>
                        <p style="height: 75px; text-align:center;font-size:48pt; font-weight:400;">@sTempExtMax</p>
                    </td>
                </tr>

                <tr>
                    <td>
                        <p style="height: 75px; text-align:center;font-size:48pt; font-weight:400;">@sTempExtMin48</p>
                    </td>
                    <td>
                        <p style="height: 25px; vertical-align:central; text-align:center;font-size:18pt; font-weight:300;">48h</p>
                    </td>
                    <td>
                        <p style="height: 75px; text-align:center;font-size:48pt; font-weight:400;">@sTempExtMax48</p>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>


@code {
    string sNow = "?";

    string sTempInt = "?";
    string sTempIntMin = "?";
    string sTempIntMax = "?";
    string sTempIntMin48 = "?";
    string sTempIntMax48 = "?";
    string sTempUpdate = "?";
    string styleInt = "color:gray;";

    string sTempExt = "?";
    string sTempExtMin = "?";
    string sTempExtMax = "?";
    string sTempExtMin48 = "?";
    string sTempExtMax48 = "?";
    string styleExt = "color:gray;";

    System.Threading.Timer? timerClock;
    System.Threading.Timer? timerTemp;
    double hr, min, sec;

    // NOTE: this math can be simplified!!!
    private async void SetClock(object? stateInfo)
    {
        //var time = DateTime.Now;
        //hr = 360.0 * time.Hour / 12 + 30.0 * time.Minute / 60.0;
        //min = 360.0 * time.Minute / 60 + 6.0 * time.Second / 60.0;
        //sec = 360.0 * time.Second / 60 + 6.0 * time.Millisecond / 1000.0;

        sNow = DateTime.Now.ToString("HH:mm:ss");

        StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }

    private async void SetTemp(object? stateInfo)
    {
        // Uri uri = new("http://192.168.10.161/dump");
        // Uri uri = new("http://rbp-02.local:5000/IOT");
        // Uri uri = new("http://rbp-02.local:5000/IOT/GetTemp");
        Uri uriInt = new("http://rbp-02.local:5000/IOT/GetStats");
        Uri uriExt = new("http://192.168.10.73:5000/IOT/GetStats");

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, uriInt);
            request.SetBrowserRequestMode(BrowserRequestMode.Cors);
            request.SetBrowserRequestCache(BrowserRequestCache.NoStore); //optional

            using (var httpClient = new HttpClient())
            {
                var response = await httpClient.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    var stats = await response.Content.ReadFromJsonAsync<TStats>();

                    try
                    {
                        sTempInt = $"{stats.Temp:0.0} °C";
                        sTempIntMin = $"{stats.TempMin24:0.0}";
                        sTempIntMax = $"{stats.TempMax24:0.0}";
                        sTempIntMin48 = $"{stats.TempMin48:0.0}";
                        sTempIntMax48 = $"{stats.TempMax48:0.0}";

                        sTempUpdate = DateTime.Now.ToString("HHmmss");
                    }
                    catch { };
                };
            };

            styleInt = "color:white;";
        }
        catch (Exception ex)
        {
            styleInt = "color:gray; ";

            // await this.DisplayAlert("Error", ex.Message, "OK");
            // sTempInt = ex.Message;
        };

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, uriExt);
            request.SetBrowserRequestMode(BrowserRequestMode.Cors);
            request.SetBrowserRequestCache(BrowserRequestCache.NoStore); //optional

            using (var httpClient = new HttpClient())
            {
                var response = await httpClient.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    var stats = await response.Content.ReadFromJsonAsync<TStats>();

                    try
                    {
                        sTempExt = $"{stats.Temp:0.0} °C";
                        sTempExtMin = $"{stats.TempMin24:0.0}";
                        sTempExtMax = $"{stats.TempMax24:0.0}";
                        sTempExtMin48 = $"{stats.TempMin48:0.0}";
                        sTempExtMax48 = $"{stats.TempMax48:0.0}";
                    }
                    catch { };
                };
            };

            styleExt = "color:white; ";
        }
        catch (Exception ex)
        {
            styleExt = "color:gray; ";

            // await this.DisplayAlert("Error", ex.Message, "OK");
            // sTempInt = ex.Message;
        };

        StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        SetClock(null);

        timerClock = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 100, 100);	//  100 milliseconds
        timerTemp = new System.Threading.Timer(SetTemp, new System.Threading.AutoResetEvent(false),1000, 60 * 1000);    //  1 min
    }
}