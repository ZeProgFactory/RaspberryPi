@page "/"
@inject IJSRuntime JS;

<PageTitle>SweetHome</PageTitle>

<style>
    body {
        background-color: black;
        color: white;
    }
</style>

    <p style="text-align:center;font-size:172pt; font-weight:600;">@sNow</p>

@*     <table>
        <tr>
            <td > 
                <p style="text-align:center;font-size:96pt; font-weight:600;">@sTempInt</p>
            </td>
            <td > 
                &nbsp;
            </td>
            <td>
                <p style="text-align:center;font-size:48pt; font-weight:400;">@sTempIntMin</p>
                <p style="text-align:center;font-size:48pt; font-weight:400;">@sTempIntMax</p>
            </td>
            <td > 
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
            </td>
            <td > 
                <p style="text-align:center;font-size:96pt; font-weight:600;">@sTempExt</p>
            </td>
            <td > 
                &nbsp;
            </td>
            <td>
                <p style="text-align:center;font-size:48pt; font-weight:400;">@sTempExtMin</p>
                <p style="text-align:center;font-size:48pt; font-weight:400;">@sTempExtMax</p>
            </td>        </tr>
    </table>
 *@

    <table align="center" >
        <tr>
            <td colspan="3" > 
                <p style="text-align:center;font-size:96pt; font-weight:500;">@sTempInt</p>
            </td>
            <td > 
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
            </td>
            <td colspan="3"> 
                <p style="text-align:center;font-size:96pt; font-weight:500;">@sTempExt</p>
            </td>
        </tr>

        <tr>
            <td> 
                <p style="text-align:center;font-size:48pt; font-weight:400;">@sTempIntMin</p>
            </td>
            <td > 
                <p style=" vertical-align:central; text-align:center;font-size:18pt; font-weight:300;">24h</p>
            </td> 
            <td>
                <p style="text-align:center;font-size:48pt; font-weight:400;">@sTempIntMax</p>
            </td>
            <td width="100" > 
                &nbsp;
            </td>
            <td > 
                <p style="text-align:center;font-size:48pt; font-weight:400;">@sTempExtMin</p>
            </td>
            <td > 
                <p style=" vertical-align:central; text-align:center;font-size:18pt; font-weight:300;">24h</p>
            </td>
            <td>
                <p style="text-align:center;font-size:48pt; font-weight:400;">@sTempExtMax</p>
            </td>        
        </tr>
    </table>

    

@code {
    string sNow = "?";

    string sTempInt = "?";
    string sTempIntMin = "?";
    string sTempIntMax = "?";

    string sTempExt = "?";
    string sTempExtMin = "?";
    string sTempExtMax = "?";

    System.Threading.Timer? timerClock;
    System.Threading.Timer? timerTemp;
    double hr, min, sec;

    // NOTE: this math can be simplified!!!
    private async void SetClock(object? stateInfo)
    {
        //var time = DateTime.Now;
        //hr = 360.0 * time.Hour / 12 + 30.0 * time.Minute / 60.0;
        //min = 360.0 * time.Minute / 60 + 6.0 * time.Second / 60.0;
        //sec = 360.0 * time.Second / 60 + 6.0 * time.Millisecond / 1000.0;

        sNow = DateTime.Now.ToString("HH:mm:ss");

        StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }

    private async void SetTemp(object? stateInfo)
    {
        // Uri uri = new("http://192.168.10.161/dump");
        // Uri uri = new("http://rbp-02.local:5000/IOT");
        // Uri uri = new("http://rbp-02.local:5000/IOT/GetTemp");
        Uri uriInt = new("http://rbp-02.local:5000/IOT/GetStats");
        Uri uriExt = new("http://192.168.10.73:5000/IOT/GetStats");

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, uriInt);
            request.SetBrowserRequestMode(BrowserRequestMode.Cors);  
            request.SetBrowserRequestCache(BrowserRequestCache.NoStore); //optional            

            using (var httpClient = new HttpClient())            
            {
                var response = await httpClient.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    var stats = await response.Content.ReadFromJsonAsync<TStats>();
                    
                    try
                    {
                        sTempInt = $"{stats.Temp:0.0} °C";
                        sTempIntMin = $"{stats.TempMin24:0.0}";
                        sTempIntMax = $"{stats.TempMax24:0.0}";
                    }
                    catch{};
                };
            };
        }
        catch (Exception ex)
        {
            // await this.DisplayAlert("Error", ex.Message, "OK");
            // sTempInt = ex.Message;
        };

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, uriExt);
            request.SetBrowserRequestMode(BrowserRequestMode.Cors);  
            request.SetBrowserRequestCache(BrowserRequestCache.NoStore); //optional            

            using (var httpClient = new HttpClient())            
            {
                var response = await httpClient.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    var stats = await response.Content.ReadFromJsonAsync<TStats>();

                    try
                    {
                        sTempExt = $"{stats.Temp:0.0} °C";
                        sTempExtMin = $"{stats.TempMin24:0.0}";
                        sTempExtMax = $"{stats.TempMax24:0.0}";
                    }
                    catch{};
                };
            };
        }
        catch (Exception ex)
        {
            // await this.DisplayAlert("Error", ex.Message, "OK");
            // sTempInt = ex.Message;
        };

        StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        SetClock(null);

        timerClock = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 10, 10); // 10 milliseconds
        timerTemp = new System.Threading.Timer(SetTemp, new System.Threading.AutoResetEvent(false), 1000, 1000); // 1000 milliseconds
    }
}